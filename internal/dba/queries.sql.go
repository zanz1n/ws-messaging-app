// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: queries.sql

package dba

import (
	"context"
)

const getAllMessages = `-- name: GetAllMessages :many
SELECT id, "createdAt", "updatedAt", content, "imageUrl", "userId" FROM "message" LIMIT $1
`

func (q *Queries) GetAllMessages(ctx context.Context, limit int32) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getAllMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.ImageUrl,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByUser = `-- name: GetMessagesByUser :many
SELECT id, "createdAt", "updatedAt", content, "imageUrl", "userId" FROM "message" WHERE "userId" = $1 LIMIT $2
`

type GetMessagesByUserParams struct {
	UserId string
	Limit  int32
}

func (q *Queries) GetMessagesByUser(ctx context.Context, arg GetMessagesByUserParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByUser, arg.UserId, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.ImageUrl,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
